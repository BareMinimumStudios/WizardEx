import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	mavenCentral()
	maven {
		name = "wispForestReleases"
		url = uri("https://maven.wispforest.io/releases")
	}
	maven {
		name = "Ladysnake"
		url = "https://maven.ladysnake.org/releases"
	}
	maven {
		name = "Shedaniel"
		url = "https://maven.shedaniel.me/"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com"
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		name = "Nucleoid"
		url = "https://maven.nucleoid.xyz/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "Curseforge"
		url = "https://www.cursemaven.com"
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"wizardex" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 17
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered() {
		mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings_version}:intermediary-v2")
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// FLK (otherwise, will be a pain)
	modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")

	// in-house
	modImplementation "maven.modrinth:playerex-directors-cut:${project.playerex_version}"
	modImplementation "maven.modrinth:data-attributes-directors-cut:${project.data_attributes_version}"
	modImplementation "maven.modrinth:opc-directors-cut:${project.opc_version}"

	// owo
	modApi("io.wispforest:owo-lib:${project.owo_version}")

	// Cardinal-Components
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api}")
	implementation 'net.objecthunter:exp4j:0.4.8'

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Spell power attributes
	modImplementation "maven.modrinth:spell-power:${project.spell_power_version}-fabric"

	implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}